---

name: Отрицание
theory: |

  Наряду с конъюнкцией (**И**) и дизъюнкцией (**ИЛИ**), часто используется операция «**отрицание**». Отрицание меняет логическое значение на противоположное.

  В программировании ему соответствует унарный оператор `not`.

  ```python
  not True   # False
  not False  # True
  ```

  Например, если есть функция, проверяющая чётность числа, то с помощью отрицания можно выполнить проверку нечётности:

  ```python
  def is_even(number):
      return number % 2 == 0

  print(is_even(10))      # => True
  print(not is_even(10))  # => False
  ```

  То есть мы просто добавили `not` слева от вызова функции и получили обратное действие.

  Отрицание — мощный инструмент, который позволяет лаконично выражать задуманные правила в коде без необходимости писать новые функции.

  А что если написать так `not not is_even(10)`? Удивительно, но код сработает:

  ```python
  print(not not is_even(10))  # => True
  ```

  В логике двойное отрицание подобно отсутствию отрицания вообще:

  ```python
  not not True   # True
  not not False  # False

  print(not not is_even(10)) # => True
  print(not not is_even(11)) # => False
  ```

instructions: |

  1. Реализуйте функцию `is_palindrome()`, которая определяет, является ли слово палиндромом или нет. Палиндром это слово, которое читается одинаково в обоих направлениях.

  ```java
  is_palindrome('шалаш') # true
  is_palindrome('ага') # true
  is_palindrome('хекслет') # false

  # Слова в метод могут быть переданы в любом регистре
  # Поэтому сначала нужно привести слово в нижний регистр word.lower()
  is_palindrome('Ага') # false
  ```

  2. Реализуйте функцию `is_not_palindrome()`, которая проверяет что слово НЕ является палиндромом:

  ```javascript
  is_not_palindrome('шалаш') # false
  is_not_palindrome('ага') # false
  is_not_palindrome('хекслет') # true
  ```

  Для этого, вызовите функцию `is_palindrome()` внутри `is_not_palindrome()` и примените отрицание.

tips:
  - |
    [Законы Де Моргана](https://ru.wikipedia.org/wiki/Законы_де_Моргана)
